{
  "info": {
    "name": "Consensus Error Handling & Validation Tests",
    "description": "Comprehensive tests for error handling middleware and input validation across all API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "consensus-error-handling-tests"
  },
  "item": [
    {
      "name": "404 Not Found Tests",
      "item": [
        {
          "name": "Non-existent Route",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/nonexistent-route",
              "host": ["{{base_url}}"],
              "path": ["api", "nonexistent-route"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('statusCode', 404);",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('path');",
                  "    pm.expect(jsonData).to.have.property('method');",
                  "});",
                  "",
                  "pm.test('Error message indicates route not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Club Not Found",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/clubs/00000000-0000-0000-0000-000000000000",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs", "00000000-0000-0000-0000-000000000000"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('statusCode', 404);",
                  "});",
                  "",
                  "pm.test('Error message indicates club not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Club with ID');",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Member Not Found",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/members/00000000-0000-0000-0000-000000000000",
              "host": ["{{base_url}}"],
              "path": ["api", "members", "00000000-0000-0000-0000-000000000000"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message indicates member not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Member with ID');",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Validation Error Tests",
      "item": [
        {
          "name": "Create Club - Missing Name",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"book\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clubs",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation error structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('message', 'Validation failed');",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "    pm.expect(jsonData.errors).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Error mentions missing name', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const errorText = jsonData.errors.join(' ');",
                  "    pm.expect(errorText).to.include('name');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Club - Invalid Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Club\",\n  \"type\": \"invalid_type\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clubs",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions invalid type', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const errorText = jsonData.errors.join(' ');",
                  "    pm.expect(errorText).to.include('type');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Club - Empty Name",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"type\": \"book\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clubs",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions empty name', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const errorText = jsonData.errors.join(' ');",
                  "    pm.expect(errorText).to.include('empty');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Member - Missing Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Member\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clubs/{{club_id}}/members",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs", "{{club_id}}", "members"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions missing email', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const errorText = jsonData.errors.join(' ');",
                  "    pm.expect(errorText).to.include('email');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Member - Invalid Email Format",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Member\",\n  \"email\": \"invalid-email\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clubs/{{club_id}}/members",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs", "{{club_id}}", "members"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions invalid email format', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const errorText = jsonData.errors.join(' ');",
                  "    pm.expect(errorText).to.include('email');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Database Error Tests",
      "item": [
        {
          "name": "Invalid UUID Format",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/clubs/invalid-uuid",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs", "invalid-uuid"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions invalid ID format', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Invalid ID format');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Member to Non-existent Club",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Member\",\n  \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clubs/00000000-0000-0000-0000-000000000000/members",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs", "00000000-0000-0000-0000-000000000000", "members"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
                  "});",
                  "",
                  "pm.test('Error indicates club not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Malformed Request Tests",
      "item": [
        {
          "name": "Invalid JSON Body",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Club\",\n  \"type\": \"book\"\n  // Missing closing brace"
            },
            "url": {
              "raw": "{{base_url}}/api/clubs",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates malformed JSON', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('JSON');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Missing Content-Type Header",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Club\",\n  \"type\": \"book\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/clubs",
              "host": ["{{base_url}}"],
              "path": ["api", "clubs"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 415', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 415]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3001"
    }
  ]
}
