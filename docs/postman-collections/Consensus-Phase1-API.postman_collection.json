{
	"info": {
		"_postman_id": "consensus-phase1-api",
		"name": "Consensus Phase 1 API",
		"description": "Complete API collection for Consensus Phase 1 (MVP) endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clubs",
			"item": [
				{
					"name": "Get All Clubs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/clubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clubs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Club",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response has club data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('type');",
									"});",
									"",
									"// Save club ID to variable for subsequent requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('club_id', jsonData.data.id);",
									"    console.log('Club ID saved:', jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"My Book Club\",\n  \"type\": \"book\",\n  \"config\": {\n    \"minRecommendations\": 3,\n    \"maxRecommendations\": 5,\n    \"votingPoints\": [3, 2, 1],\n    \"turnOrder\": \"sequential\",\n    \"tieBreakingMethod\": \"random\",\n    \"minimumParticipation\": 80\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clubs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Club by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response has club data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('type');",
									"});",
									"",
									"pm.test(\"Club ID matches requested ID\", function () {",
									"    const jsonData = pm.response.json();",
									"    const clubId = pm.collectionVariables.get('club_id');",
									"    pm.expect(jsonData.data.id).to.eql(clubId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/clubs/{{club_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clubs",
								"{{club_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Club",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response has updated club data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('type');",
									"});",
									"",
									"pm.test(\"Club name was updated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.name).to.eql('Updated Book Club');",
									"});",
									"",
									"pm.test(\"Club config was updated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.config.minRecommendations).to.eql(2);",
									"    pm.expect(jsonData.data.config.maxRecommendations).to.eql(4);",
									"    pm.expect(jsonData.data.config.turnOrder).to.eql('random');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Book Club\",\n  \"type\": \"book\",\n  \"config\": {\n    \"minRecommendations\": 2,\n    \"maxRecommendations\": 4,\n    \"votingPoints\": [3, 2, 1],\n    \"turnOrder\": \"random\",\n    \"tieBreakingMethod\": \"recommender_decides\",\n    \"minimumParticipation\": 90\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clubs/{{club_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clubs",
								"{{club_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Club",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/clubs/{{club_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clubs",
								"{{club_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Members",
			"item": [
				{
					"name": "Get Club Members",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/clubs/{{club_id}}/members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clubs",
								"{{club_id}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Member to Club",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response has member data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('clubId');",
									"});",
									"",
									"// Save member ID to variable for subsequent requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('member_id', jsonData.data.id);",
									"    console.log('Member ID saved:', jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clubs/{{club_id}}/members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clubs",
								"{{club_id}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Member",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Smith\",\n  \"email\": \"johnsmith@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/members/{{member_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"members",
								"{{member_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Member",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/members/{{member_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"members",
								"{{member_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rounds",
			"item": [
				{
					"name": "Get Club Rounds",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/clubs/{{club_id}}/rounds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clubs",
								"{{club_id}}",
								"rounds"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start New Round",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response has round data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('clubId');",
									"    pm.expect(jsonData.data).to.have.property('currentRecommenderId');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"});",
									"",
									"// Save round ID to variable for subsequent requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.collectionVariables.set('round_id', jsonData.data.id);",
									"    console.log('Round ID saved:', jsonData.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentRecommenderId\": \"{{member_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/clubs/{{club_id}}/rounds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clubs",
								"{{club_id}}",
								"rounds"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Round by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Round Status",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"voting\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Recommendations",
			"item": [
				{
					"name": "Get Round Recommendations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}/recommendations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}",
								"recommendations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Recommendations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success true\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response has recommendations data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.eql(3);",
									"});",
									"",
									"// Save recommendation IDs to variables for subsequent requests",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.length >= 3) {",
									"        pm.collectionVariables.set('recommendation_1_id', jsonData.data[0].id);",
									"        pm.collectionVariables.set('recommendation_2_id', jsonData.data[1].id);",
									"        pm.collectionVariables.set('recommendation_3_id', jsonData.data[2].id);",
									"        console.log('Recommendation IDs saved:', jsonData.data.map(r => r.id));",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recommendations\": [\n    {\n      \"title\": \"The Great Gatsby\",\n      \"description\": \"A classic American novel by F. Scott Fitzgerald\"\n    },\n    {\n      \"title\": \"1984\",\n      \"description\": \"Dystopian fiction by George Orwell\"\n    },\n    {\n      \"title\": \"To Kill a Mockingbird\",\n      \"description\": \"A novel by Harper Lee about racial injustice\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}/recommendations",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}",
								"recommendations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Recommendation",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"The Great Gatsby (Updated)\",\n  \"description\": \"A classic American novel by F. Scott Fitzgerald - Updated description\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/recommendations/{{recommendation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"recommendations",
								"{{recommendation_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Recommendation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/recommendations/{{recommendation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"recommendations",
								"{{recommendation_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Voting",
			"item": [
				{
					"name": "Get Round Votes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}/votes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}",
								"votes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit Votes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"votes\": [\n    {\n      \"recommendationId\": \"{{recommendation_1_id}}\",\n      \"points\": 3\n    },\n    {\n      \"recommendationId\": \"{{recommendation_2_id}}\",\n      \"points\": 2\n    },\n    {\n      \"recommendationId\": \"{{recommendation_3_id}}\",\n      \"points\": 1\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}/votes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}",
								"votes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close Voting",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}/close-voting",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}",
								"close-voting"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Completions",
			"item": [
				{
					"name": "Get Round Completions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}/completions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}",
								"completions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark Completion",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"memberId\": \"{{member_id}}\",\n  \"isCompleted\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}/completions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}",
								"completions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Finish Round",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/rounds/{{round_id}}/finish",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"rounds",
								"{{round_id}}",
								"finish"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Get All Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications?page=1&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Items per page (default: 20)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unread Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/unread",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"unread"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unread Count",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/unread/count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"unread",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark Notification as Read",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/{{notification_id}}/read",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{notification_id}}",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark All Notifications as Read",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notifications/read-all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"read-all"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3001",
			"type": "string"
		},
		{
			"key": "club_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "member_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "round_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "recommendation_1_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "recommendation_2_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "recommendation_3_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "notification_id",
			"value": "",
			"type": "string"
		}
	]
}
